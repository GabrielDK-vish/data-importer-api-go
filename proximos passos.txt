Próximos passos - Backend Golang (Data Importer API)

1. Criar migrations do Postgres:
   - Tabelas: partners, customers, products, usages
   - Definir chaves primárias, estrangeiras e tipos corretos
   - Testar criação das tabelas localmente

2. Implementar Repository:
   - Funções para CRUD e consultas necessárias:
     - GetAllCustomers()
     - GetUsageByCustomer(customerId)
     - GetBillingMonthly()
     - GetBillingByProduct()
     - GetBillingByPartner()

3. Implementar Service:
   - Regras de negócio e chamadas para repository
   - Possível tratamento de agregações e formatações de dados

4. Implementar Handlers (API):
   - LoginHandler (autenticação JWT, hardcoded ou DB de usuários)
   - GetCustomersHandler
   - GetCustomerUsageHandler
   - MonthlyBillingHandler
   - BillingByProductHandler
   - BillingByPartnerHandler
   - Testar cada endpoint usando Postman ou Insomnia

5. Configurar banco de dados local:
   - Variáveis de ambiente: DATABASE_URL e JWT_SECRET
   - Inserir dados de teste (partners, customers, products, usages)

6. Testar API localmente:
   - Rodar `go run ./cmd/main.go`
   - Testar endpoints e autenticação JWT
   - Ajustar erros de conexão, tipos de dados e respostas

7. Implementar Importador CLI:
   - Ler CSV ou arquivo enviado
   - Normalizar dados
   - Inserir em lotes no Postgres via pgx.CopyFrom
   - Validar integridade e duplicidade

8. Dockerização:
   - Criar docker-compose com Postgres + API
   - Testar container e conexão

9. Deploy (Render / Railway):
   - Subir API em nuvem
   - Testar endpoints remotamente

10. Documentação:
    - Documentar endpoints e exemplos
    - Criar guia de execução do importador
